// Code generated by mockery v2.53.4. DO NOT EDIT.

package cache

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// GetOrLoad provides a mock function with given fields: key, ttl, loader
func (_m *MockCache) GetOrLoad(key string, ttl time.Duration, loader func() (interface{}, error)) (interface{}, error) {
	ret := _m.Called(key, ttl, loader)

	if len(ret) == 0 {
		panic("no return value specified for GetOrLoad")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, func() (interface{}, error)) (interface{}, error)); ok {
		return rf(key, ttl, loader)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration, func() (interface{}, error)) interface{}); ok {
		r0 = rf(key, ttl, loader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration, func() (interface{}, error)) error); ok {
		r1 = rf(key, ttl, loader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_GetOrLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrLoad'
type MockCache_GetOrLoad_Call struct {
	*mock.Call
}

// GetOrLoad is a helper method to define mock.On call
//   - key string
//   - ttl time.Duration
//   - loader func()(interface{} , error)
func (_e *MockCache_Expecter) GetOrLoad(key interface{}, ttl interface{}, loader interface{}) *MockCache_GetOrLoad_Call {
	return &MockCache_GetOrLoad_Call{Call: _e.mock.On("GetOrLoad", key, ttl, loader)}
}

func (_c *MockCache_GetOrLoad_Call) Run(run func(key string, ttl time.Duration, loader func() (interface{}, error))) *MockCache_GetOrLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Duration), args[2].(func() (interface{}, error)))
	})
	return _c
}

func (_c *MockCache_GetOrLoad_Call) Return(_a0 interface{}, _a1 error) *MockCache_GetOrLoad_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_GetOrLoad_Call) RunAndReturn(run func(string, time.Duration, func() (interface{}, error)) (interface{}, error)) *MockCache_GetOrLoad_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
